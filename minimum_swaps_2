In this post, you will learn how to solve Hackerrank's Minimum Swaps 2 Problem and its solution in Java.

You are given an unordered array consisting of consecutive integers  [1, 2, 3, ..., n] without any duplicates. You are allowed to swap any two elements. You need to find the minimum number of swaps required to sort the array in ascending order.
For example, given the array arr = [7,1,3,2,4,5,6] we perform the following steps:

i   arr                          swap (indices)

0   [7, 1, 3, 2, 4, 5, 6]   swap (0,3)

1   [2, 1, 3, 7, 4, 5, 6]   swap (0,1)

2   [1, 2, 3, 7, 4, 5, 6]   swap (3,4)

3   [1, 2, 3, 4, 7, 5, 6]   swap (4,5)
4   [1, 2, 3, 4, 5, 7, 6]   swap (5,6)
5   [1, 2, 3, 4, 5, 6, 7]
It took  5 swaps to sort the array.




'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.replace(/\s*$/, '')
        .split('\n')
        .map(str => str.replace(/\s*$/, ''));

    main();
});

function readLine() {
    return inputString[currentLine++];
}

// Complete the minimumSwaps function below.
function minimumSwaps(arr) {
    let count = 0;
    for (let i=0; i< arr.length; i++) {
        
        if(arr[i] !== i+1) {
            count++;
            let temp = arr[i];
            arr[i] = arr[temp-1];
            arr[temp-1] = temp;
            i--;
        }
        
    }
    return count;
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const n = parseInt(readLine(), 10);

    const arr = readLine().split(' ').map(arrTemp => parseInt(arrTemp, 10));

    const res = minimumSwaps(arr);

    ws.write(res + '\n');

    ws.end();
}
